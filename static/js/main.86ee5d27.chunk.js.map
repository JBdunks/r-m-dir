{"version":3,"sources":["components/nav/nav.js","components/characters/characters.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","id","characters","data","results","Characters","state","handleInputChange","event","target","name","console","log","value","searchTerm","toLowerCase","newList","filter","character","includes","setState","sortById","sortedCharacters","sort","a","b","sortOrder","reverse","sortByName","sortBySpecies","species","sortByGender","gender","sortByLocation","location","sortByStatus","status","type","this","search","onChange","placeholder","onClick","map","key","src","image","alt","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86ee5d27.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./nav.css\";\n\nconst Nav = () => {\n  return (\n    <div className=\"navbar-fixed\">\n      <nav className=\"navigation\">\n        <div className=\"nav-wrapper\">\n          <a href=\"#\" className=\"brand-logo center\" id=\"logo\">\n            Rick and Morty Directory\n          </a>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport data from \"../../characters.json\";\nimport \"./characters.css\";\n\nvar characters = data.results;\n\nclass Characters extends React.Component {\n  state = {\n    characters: characters\n  };\n  ///===search function\n  handleInputChange = event => {\n    if (event.target.name === \"search\") {\n      console.log(event.target.value);\n      const searchTerm = event.target.value.toLowerCase();\n      console.log(searchTerm);\n\n      let newList = this.state.characters.filter(character => {\n        return character.name.toLowerCase().includes(searchTerm);\n      });\n\n      console.log(newList);\n\n      this.setState({\n        // [event.target.name]: event.target.value\n        characters: newList\n      });\n    }\n  };\n\n  //=========many sorting functions start now=========\n  sortById = () => {\n    let sortedCharacters = this.state.characters.sort((a, b) => {\n      if (b.id > a.id) {\n        return -1;\n      }\n      if (a.id > b.id) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    if (this.state.sortOrder === \"DESC\") {\n      sortedCharacters.reverse();\n      this.setState({ sortOrder: \"ASC\" });\n    } else {\n      this.setState({ sortOrder: \"DESC\" });\n    }\n    console.log(\"sort by id\");\n    this.setState({ results: sortedCharacters });\n  };\n\n  //sort by name==========\n  sortByName = () => {\n    let sortedCharacters = this.state.characters.sort((a, b) => {\n      if (b.name > a.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    if (this.state.sortOrder === \"DESC\") {\n      sortedCharacters.reverse();\n      this.setState({ sortOrder: \"ASC\" });\n    } else {\n      this.setState({ sortOrder: \"DESC\" });\n    }\n    console.log(\"sort by name\");\n    this.setState({ results: sortedCharacters });\n  };\n  // sort by species==========\n  sortBySpecies = () => {\n    let sortedCharacters = this.state.characters.sort((a, b) => {\n      if (b.species > a.species) {\n        return -1;\n      }\n      if (a.species > b.species) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    if (this.state.sortOrder === \"DESC\") {\n      sortedCharacters.reverse();\n      this.setState({ sortOrder: \"ASC\" });\n    } else {\n      this.setState({ sortOrder: \"DESC\" });\n    }\n    console.log(\"sort by species\");\n    this.setState({ results: sortedCharacters });\n  };\n\n  //sort by gender ============\n  sortByGender = () => {\n    let sortedCharacters = this.state.characters.sort((a, b) => {\n      if (b.gender > a.gender) {\n        return -1;\n      }\n      if (a.gender > b.gender) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    if (this.state.sortOrder === \"DESC\") {\n      sortedCharacters.reverse();\n      this.setState({ sortOrder: \"ASC\" });\n    } else {\n      this.setState({ sortOrder: \"DESC\" });\n    }\n    console.log(\"sort by gender\");\n    this.setState({ results: sortedCharacters });\n  };\n\n  // sort by location ==========\n  sortByLocation = () => {\n    let sortedCharacters = this.state.characters.sort((a, b) => {\n      if (b.location.name > a.location.name) {\n        return -1;\n      }\n      if (a.location.name > b.location.name) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    if (this.state.sortOrder === \"DESC\") {\n      sortedCharacters.reverse();\n      this.setState({ sortOrder: \"ASC\" });\n    } else {\n      this.setState({ sortOrder: \"DESC\" });\n    }\n    console.log(\"sort by location\");\n    this.setState({ results: sortedCharacters });\n  };\n\n  //sort by status ============\n  sortByStatus = () => {\n    let sortedCharacters = this.state.characters.sort((a, b) => {\n      if (b.status > a.status) {\n        return -1;\n      }\n      if (a.status > b.status) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    if (this.state.sortOrder === \"DESC\") {\n      sortedCharacters.reverse();\n      this.setState({ sortOrder: \"ASC\" });\n    } else {\n      this.setState({ sortOrder: \"DESC\" });\n    }\n    console.log(\"sort by status\");\n    this.setState({ results: sortedCharacters });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"navbar-fixed\">\n          <nav className=\"searchRow\">\n            <input\n              type=\"text\"\n              name=\"search\"\n              value={this.state.search}\n              onChange={this.handleInputChange}\n              placeholder=\"Search By Character Name\"\n            />\n          </nav>\n        </div>\n\n        <table>\n          <thead>\n            <tr>\n              <th onClick={this.sortById}>Image</th>\n              <th onClick={this.sortByName}>Name</th>\n              <th onClick={this.sortBySpecies}> Species</th>\n              <th onClick={this.sortByGender}> Gender</th>\n              <th onClick={this.sortByLocation}> Location</th>\n              <th onClick={this.sortByStatus}> Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.characters.map(character => (\n              <tr key={character.id}>\n                <td>\n                  <img\n                    className=\"characterImage\"\n                    src={character.image}\n                    alt={character.name}\n                  />\n                </td>\n                <td>{character.name}</td>\n                <td>{character.species}</td>\n                <td>{character.gender}</td>\n                <td>{character.location.name}</td>\n                <td>{character.status}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nexport default Characters;\n","import React from \"react\";\nimport Nav from \"./components/nav/nav\";\n// import Search from \"./components/search/search\";\nimport Characters from \"./components/characters/characters\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <Nav />\n\n      <br />\n      <Characters />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}